plugins {
	id "checkstyle"
	id "io.spring.javaformat" version "$javaFormatVersion"
	id "java-gradle-plugin"
	id "maven-publish"
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

group = 'io.spring.gradle'

dependencies {
	checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:${javaFormatVersion}")
	compileOnly("com.gradle:gradle-enterprise-gradle-plugin:3.1.1")
	testImplementation("com.gradle:gradle-enterprise-gradle-plugin:3.1.1")
	testImplementation("org.assertj:assertj-core:3.11.1")
	testImplementation("org.junit.jupiter:junit-jupiter:5.6.0")
	testImplementation("org.mockito:mockito-core:3.2.4")
}

checkstyle {
	def archive = configurations.checkstyle.filter { it.name.startsWith("spring-javaformat-checkstyle")}
	config = resources.text.fromArchiveEntry(archive, "io/spring/javaformat/checkstyle/checkstyle.xml")
	toolVersion = 8.28
}

gradlePlugin {
	plugins {
		gradleEnterprisePlugin {
			id = 'io.spring.gradle-enterprise-conventions'
			implementationClass = 'io.spring.ge.GradleEnterpriseConventionsPlugin'
		}
	}
}

if (project.hasProperty("distributionRepository")) {
	publishing {
		repositories {
			maven {
				url = "${distributionRepository}"
				name = "deployment"
			}
		}
	}
}

tasks.withType(GenerateModuleMetadata).all {
	enabled = false
}
